(arktest2) pcl@pcl-m:~/lxx/projetArk/new/Ark/Ark_Plus/Finetuning$ CUDA_VISIBLE_DEVICES=0 \
python main_classification.py --data_set advCheX \
  --data_dir ./advCheX_test \
  --train_list dataset/advCheX/train.csv \
  --val_list   dataset/advCheX/valid.csv \
  --test_list  dataset/advCheX/test.csv \
  --mode train --epochs 10 --warmup-epochs 0 \
  --batch_size 2 --num_class 19 \
  --model swin_large_384 --init ark_plus --key teacher \
  --img_size 896 --input_size 768 \
  --pretrained_weights ./Ark6_swinLarge768_ep50.pth.tar \
  --workers 2 --opt adamw --lr 5e-5 --weight-decay 0.05 \
  --freeze_encoder False --test_every_epoch False --print_freq 20 
{'GPU': None, 'model_name': 'swin_large_384', 'init': 'ark_plus', 'pretrained_weights': './Ark6_swinLarge768_ep50.pth.tar', 'num_class': 19, 'data_set': 'advCheX', 'normalization': 'imagenet', 'img_size': 896, 'input_size': 768, 'img_depth': 3, 'data_dir': './advCheX_test', 'train_list': 'dataset/advCheX/train.csv', 'val_list': 'dataset/advCheX/valid.csv', 'test_list': 'dataset/advCheX/test.csv', 'mode': 'train', 'batch_size': 2, 'epochs': 10, 'exp_name': '', 'key': 'teacher', 'freeze_encoder': False, 'skip_training': False, 'test_every_epoch': False, 'scale_up': False, 'opt': 'adamw', 'opt_eps': 1e-08, 'opt_betas': None, 'clip_grad': None, 'momentum': 0.9, 'weight_decay': 0.05, 'sched': 'cosine', 'lr': 5e-05, 'lr_noise': None, 'lr_noise_pct': 0.67, 'lr_noise_std': 1.0, 'warmup_lr': 1e-06, 'min_lr': 1e-05, 'decay_epochs': 30, 'warmup_epochs': 0, 'cooldown_epochs': 10, 'decay_rate': 0.5, 'patience': 10, 'early_stop': True, 'num_trial': 1, 'start_index': 0, 'clean': False, 'resume': False, 'workers': 2, 'print_freq': 20, 'test_augment': True, 'anno_percent': 100, 'device': 'cuda', 'activate': 'Sigmoid', 'uncertain_label': 'LSR-Ones', 'unknown_label': 0, 'weighted_BCELoss': False, 'few_shot': -1}
[train] shape=(356, 19), positives_per_class=[0, 13, 1, 3, 0, 0, 0, 0, 6, 3, 1, 7, 0, 2, 0, 256, 0, 0, 64]
[train] rows_with_len!=19: 0
[val] shape=(102, 19), positives_per_class=[0, 4, 1, 2, 0, 0, 0, 0, 1, 2, 0, 1, 1, 1, 0, 79, 0, 0, 12]
[val] rows_with_len!=19: 0
[test] shape=(51, 19), positives_per_class=[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 42, 0, 0, 5]
[test] rows_with_len!=19: 0
start training....
run: 1
Creating model...
Creating model from pretrained weights: ./Ark6_swinLarge768_ep50.pth.tar
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/torch/functional.py:513: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3609.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/home/pcl/lxx/projetArk/new/Ark/Ark_Plus/Finetuning/models.py:181: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(pretrained_weights, map_location="cpu")
dict_keys(['epoch', 'lossMIN', 'state_dict', 'teacher', 'optimizer', 'scheduler'])
Loading teacher from checkpoint...
Removing key head.weight from pretrained checkpoint
Removing key head.bias from pretrained checkpoint
Loaded with msg: _IncompatibleKeys(missing_keys=['head.weight', 'head.bias'], unexpected_keys=['projector.weight', 'projector.bias', 'omni_heads.0.weight', 'omni_heads.0.bias', 'omni_heads.1.weight', 'omni_heads.1.bias', 'omni_heads.2.weight', 'omni_heads.2.bias', 'omni_heads.3.weight', 'omni_heads.3.bias', 'omni_heads.4.weight', 'omni_heads.4.bias', 'omni_heads.5.weight', 'omni_heads.5.bias'])
SwinTransformer(
  (patch_embed): PatchEmbed(
    (proj): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
    (norm): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
  )
  (pos_drop): Dropout(p=0.0, inplace=False)
  (layers): Sequential(
    (0): BasicLayer(
      dim=192, input_resolution=(192, 192), depth=2
      (blocks): ModuleList(
        (0): SwinTransformerBlock(
          (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (attn): WindowAttention(
            (qkv): Linear(in_features=192, out_features=576, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=192, out_features=192, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
          (drop_path): Identity()
          (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=192, out_features=768, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=768, out_features=192, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
        (1): SwinTransformerBlock(
          (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (attn): WindowAttention(
            (qkv): Linear(in_features=192, out_features=576, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=192, out_features=192, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
          (drop_path): DropPath()
          (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=192, out_features=768, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=768, out_features=192, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (downsample): PatchMerging(
        input_resolution=(192, 192), dim=192
        (reduction): Linear(in_features=768, out_features=384, bias=False)
        (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
    )
    (1): BasicLayer(
      dim=384, input_resolution=(96, 96), depth=2
      (blocks): ModuleList(
        (0-1): 2 x SwinTransformerBlock(
          (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
          (attn): WindowAttention(
            (qkv): Linear(in_features=384, out_features=1152, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=384, out_features=384, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
          (drop_path): DropPath()
          (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=384, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=1536, out_features=384, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (downsample): PatchMerging(
        input_resolution=(96, 96), dim=384
        (reduction): Linear(in_features=1536, out_features=768, bias=False)
        (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
    )
    (2): BasicLayer(
      dim=768, input_resolution=(48, 48), depth=18
      (blocks): ModuleList(
        (0-17): 18 x SwinTransformerBlock(
          (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (attn): WindowAttention(
            (qkv): Linear(in_features=768, out_features=2304, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=768, out_features=768, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
          (drop_path): DropPath()
          (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
      )
      (downsample): PatchMerging(
        input_resolution=(48, 48), dim=768
        (reduction): Linear(in_features=3072, out_features=1536, bias=False)
        (norm): LayerNorm((3072,), eps=1e-05, elementwise_affine=True)
      )
    )
    (3): BasicLayer(
      dim=1536, input_resolution=(24, 24), depth=2
      (blocks): ModuleList(
        (0-1): 2 x SwinTransformerBlock(
          (norm1): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
          (attn): WindowAttention(
            (qkv): Linear(in_features=1536, out_features=4608, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=False)
            (proj): Linear(in_features=1536, out_features=1536, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=False)
            (softmax): Softmax(dim=-1)
          )
          (drop_path): DropPath()
          (norm2): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=6144, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (fc2): Linear(in_features=6144, out_features=1536, bias=True)
            (drop2): Dropout(p=0.0, inplace=False)
          )
        )
      )
    )
  )
  (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
  (avgpool): AdaptiveAvgPool1d(output_size=1)
  (head): Linear(in_features=1536, out_features=19, bias=True)
)
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/timm/utils/cuda.py:40: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self._scaler = torch.cuda.amp.GradScaler()
Epoch: [0][  0/178]	Time  1.206 ( 1.206)	Loss 7.0746e-01 (7.0746e-01)
Epoch: [0][ 50/178]	Time  0.393 ( 0.385)	Loss 7.8653e-02 (1.4795e-01)
Epoch: [0][100/178]	Time  0.391 ( 0.385)	Loss 1.5904e-02 (1.2088e-01)
Epoch: [0][150/178]	Time  0.396 ( 0.388)	Loss 1.8179e-01 (1.1376e-01)
Val: [ 0/51]	Time  0.353 ( 0.353)	Loss 1.4962e-01 (1.4962e-01)
Val: [50/51]	Time  0.148 ( 0.148)	Loss 2.8112e-01 (8.2170e-02)
Epoch 0000: val_loss improved from 1000000.00000 to 0.08217, saving model to ./Models/Classification/advCheX/swin_large_384_ark_plus/swin_large_384_ark_plus_run_0
Epoch: [1][  0/178]	Time  0.565 ( 0.565)	Loss 3.0360e-02 (3.0360e-02)
Epoch: [1][ 50/178]	Time  0.407 ( 0.413)	Loss 4.0747e-02 (9.3128e-02)
Epoch: [1][100/178]	Time  0.458 ( 0.420)	Loss 6.3267e-02 (9.0513e-02)
Epoch: [1][150/178]	Time  0.449 ( 0.426)	Loss 9.5904e-02 (8.7913e-02)
Val: [ 0/51]	Time  0.356 ( 0.356)	Loss 1.6640e-01 (1.6640e-01)
Val: [50/51]	Time  0.147 ( 0.163)	Loss 3.1364e-01 (8.7163e-02)
Epoch 0001: val_loss did not improve from 0.08217 
Epoch: [2][  0/178]	Time  0.626 ( 0.626)	Loss 3.0291e-02 (3.0291e-02)
Epoch: [2][ 50/178]	Time  0.441 ( 0.457)	Loss 6.1781e-02 (8.5134e-02)
Epoch: [2][100/178]	Time  0.475 ( 0.457)	Loss 2.4573e-01 (8.4884e-02)
Epoch: [2][150/178]	Time  0.474 ( 0.461)	Loss 1.0534e-02 (8.3314e-02)
Val: [ 0/51]	Time  0.364 ( 0.364)	Loss 1.8919e-01 (1.8919e-01)
Val: [50/51]	Time  0.175 ( 0.174)	Loss 1.6487e-01 (7.8578e-02)
Epoch 0002: val_loss improved from 0.08217 to 0.07858, saving model to ./Models/Classification/advCheX/swin_large_384_ark_plus/swin_large_384_ark_plus_run_0
Epoch: [3][  0/178]	Time  0.602 ( 0.602)	Loss 3.0754e-02 (3.0754e-02)
Epoch: [3][ 50/178]	Time  0.466 ( 0.457)	Loss 3.2093e-02 (7.2492e-02)
Epoch: [3][100/178]	Time  0.447 ( 0.460)	Loss 1.3532e-02 (8.0207e-02)
Epoch: [3][150/178]	Time  0.481 ( 0.463)	Loss 1.5967e-02 (8.2211e-02)
Val: [ 0/51]	Time  0.357 ( 0.357)	Loss 1.6518e-01 (1.6518e-01)
Val: [50/51]	Time  0.176 ( 0.181)	Loss 3.3040e-01 (8.0695e-02)
Epoch 0003: val_loss did not improve from 0.07858 
Epoch: [4][  0/178]	Time  0.650 ( 0.650)	Loss 3.8245e-02 (3.8245e-02)
Epoch: [4][ 50/178]	Time  0.462 ( 0.483)	Loss 2.2265e-01 (8.4132e-02)
Epoch: [4][100/178]	Time  0.513 ( 0.489)	Loss 1.0595e-01 (7.8142e-02)
Epoch: [4][150/178]	Time  0.516 ( 0.494)	Loss 3.8842e-02 (7.6396e-02)
Val: [ 0/51]	Time  0.396 ( 0.396)	Loss 1.7979e-01 (1.7979e-01)
Val: [50/51]	Time  0.191 ( 0.193)	Loss 3.2650e-01 (7.5280e-02)
Epoch 0004: val_loss improved from 0.07858 to 0.07528, saving model to ./Models/Classification/advCheX/swin_large_384_ark_plus/swin_large_384_ark_plus_run_0
Epoch: [5][  0/178]	Time  0.630 ( 0.630)	Loss 1.7137e-02 (1.7137e-02)
Epoch: [5][ 50/178]	Time  0.470 ( 0.488)	Loss 9.8584e-03 (8.1711e-02)
Epoch: [5][100/178]	Time  0.478 ( 0.491)	Loss 5.1661e-02 (7.8672e-02)
Epoch: [5][150/178]	Time  0.503 ( 0.495)	Loss 1.3694e-01 (7.4374e-02)
Val: [ 0/51]	Time  0.353 ( 0.353)	Loss 8.5125e-02 (8.5125e-02)
Val: [50/51]	Time  0.190 ( 0.192)	Loss 2.6901e-01 (9.1011e-02)
Epoch 0005: val_loss did not improve from 0.07528 
Epoch: [6][  0/178]	Time  0.682 ( 0.682)	Loss 9.9794e-02 (9.9794e-02)
Epoch: [6][ 50/178]	Time  0.508 ( 0.509)	Loss 1.4478e-01 (8.6025e-02)
Epoch: [6][100/178]	Time  0.553 ( 0.511)	Loss 3.7846e-02 (8.1440e-02)
Epoch: [6][150/178]	Time  0.518 ( 0.513)	Loss 2.5041e-01 (7.7326e-02)
Val: [ 0/51]	Time  0.369 ( 0.369)	Loss 2.2822e-01 (2.2822e-01)
Val: [50/51]	Time  0.194 ( 0.202)	Loss 2.9583e-01 (7.0168e-02)
Epoch 0006: val_loss improved from 0.07528 to 0.07017, saving model to ./Models/Classification/advCheX/swin_large_384_ark_plus/swin_large_384_ark_plus_run_0
Epoch: [7][  0/178]	Time  0.613 ( 0.613)	Loss 9.7312e-02 (9.7312e-02)
Epoch: [7][ 50/178]	Time  0.505 ( 0.496)	Loss 1.6087e-01 (7.9816e-02)
Epoch: [7][100/178]	Time  0.514 ( 0.505)	Loss 4.8348e-02 (7.6400e-02)
Epoch: [7][150/178]	Time  0.518 ( 0.510)	Loss 8.1463e-02 (8.0988e-02)
Val: [ 0/51]	Time  0.374 ( 0.374)	Loss 2.1191e-01 (2.1191e-01)
Val: [50/51]	Time  0.192 ( 0.203)	Loss 3.1106e-01 (7.8750e-02)
Epoch 0007: val_loss did not improve from 0.07017 
Epoch: [8][  0/178]	Time  0.677 ( 0.677)	Loss 1.5435e-02 (1.5435e-02)
Epoch: [8][ 50/178]	Time  0.524 ( 0.515)	Loss 3.1840e-02 (7.2130e-02)
Epoch: [8][100/178]	Time  0.520 ( 0.518)	Loss 2.1474e-02 (7.6849e-02)
Epoch: [8][150/178]	Time  0.536 ( 0.522)	Loss 2.4577e-02 (7.6841e-02)
Val: [ 0/51]	Time  0.364 ( 0.364)	Loss 2.4318e-01 (2.4318e-01)
Val: [50/51]	Time  0.195 ( 0.202)	Loss 4.2667e-01 (9.4757e-02)
Epoch 0008: val_loss did not improve from 0.07017 
Epoch: [9][  0/178]	Time  0.684 ( 0.684)	Loss 1.0673e-02 (1.0673e-02)
Epoch: [9][ 50/178]	Time  0.524 ( 0.523)	Loss 3.9373e-02 (7.9420e-02)
Epoch: [9][100/178]	Time  0.530 ( 0.526)	Loss 3.9067e-02 (8.0120e-02)
Epoch: [9][150/178]	Time  0.538 ( 0.529)	Loss 3.2948e-02 (7.6141e-02)
Val: [ 0/51]	Time  0.367 ( 0.367)	Loss 2.5538e-01 (2.5538e-01)
Val: [50/51]	Time  0.200 ( 0.203)	Loss 3.6267e-01 (8.1716e-02)
Epoch 0009: val_loss did not improve from 0.07017 
start testing.....
>> Disease = ['Normal', 'ASD', 'VSD', 'PDA', 'TOF', 'MS', 'PS', 'AS', 'AR', 'MR', 'PAH', 'PFO', 'HCM', 'DCM', 'ARVC', 'CAD', 'HTN', 'Aneurysm', 'Other']
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/sklearn/metrics/_classification.py:900: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
[0.5660139322280884, 0.03540324047207832, 0.006771100219339132, 0.06636372953653336, 0.026889244094491005, 0.8404756784439087, 0.1285140961408615]
>> Mean AUC = 0.8912 
AUC = [1.    ,0.96  ,0.96  ,0.9796,0.9   ,0.8519,0.587 ]
>> Mean MCC = 0.1267 
MCC = [ 0.    ,-0.0286,-0.0286, 0.3788,-0.0466, 0.5192, 0.0927]
>> Mean AP = 0.5390 
AP = [1.    ,0.3333,0.3333,0.75  ,0.1667,0.9498,0.2396]
>> Mean F1 = 0.2091 
F1 = [0.    ,0.    ,0.    ,0.4   ,0.    ,0.8533,0.2105]
19 19
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/sklearn/metrics/_classification.py:900: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
[0.5660139322280884, 0.03540324047207832, 0.006771100219339132, 0.06636372953653336, 0.026889244094491005, 0.8404756784439087, 0.1285140961408615]
>> Mean AUC = 0.8912 
AUC = [1.    ,0.96  ,0.96  ,0.9796,0.9   ,0.8519,0.587 ]
>> Mean MCC = 0.1267 
MCC = [ 0.    ,-0.0286,-0.0286, 0.3788,-0.0466, 0.5192, 0.0927]
>> Mean AP = 0.5390 
AP = [1.    ,0.3333,0.3333,0.75  ,0.1667,0.9498,0.2396]
>> Mean F1 = 0.2091 
F1 = [0.    ,0.    ,0.    ,0.4   ,0.    ,0.8533,0.2105]
19 19
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/sklearn/metrics/_classification.py:900: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
[0.5660139322280884, 0.03540324047207832, 0.006771100219339132, 0.06636372953653336, 0.026889244094491005, 0.8404756784439087, 0.1285140961408615]
>> Mean AUC = 0.8912 
AUC = [1.    ,0.96  ,0.96  ,0.9796,0.9   ,0.8519,0.587 ]
>> Mean MCC = 0.1267 
MCC = [ 0.    ,-0.0286,-0.0286, 0.3788,-0.0466, 0.5192, 0.0927]
>> Mean AP = 0.5390 
AP = [1.    ,0.3333,0.3333,0.75  ,0.1667,0.9498,0.2396]
>> Mean F1 = 0.2091 
F1 = [0.    ,0.    ,0.    ,0.4   ,0.    ,0.8533,0.2105]
19 19
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/sklearn/metrics/_classification.py:900: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
[0.5660139322280884, 0.03540324047207832, 0.006771100219339132, 0.06636372953653336, 0.026889244094491005, 0.8404756784439087, 0.1285140961408615]
>> Mean AUC = 0.8912 
AUC = [1.    ,0.96  ,0.96  ,0.9796,0.9   ,0.8519,0.587 ]
>> Mean MCC = 0.1267 
MCC = [ 0.    ,-0.0286,-0.0286, 0.3788,-0.0466, 0.5192, 0.0927]
>> Mean AP = 0.5390 
AP = [1.    ,0.3333,0.3333,0.75  ,0.1667,0.9498,0.2396]
>> Mean F1 = 0.2091 
F1 = [0.    ,0.    ,0.    ,0.4   ,0.    ,0.8533,0.2105]
19 19
/home/pcl/anaconda3/envs/arktest2/lib/python3.8/site-packages/sklearn/metrics/_classification.py:900: RuntimeWarning: invalid value encountered in double_scalars
  mcc = cov_ytyp / np.sqrt(cov_ytyt * cov_ypyp)
[0.5660139322280884, 0.03540324047207832, 0.006771100219339132, 0.06636372953653336, 0.026889244094491005, 0.8404756784439087, 0.1285140961408615]
>> Mean AUC = 0.8912 
AUC = [1.    ,0.96  ,0.96  ,0.9796,0.9   ,0.8519,0.587 ]
>> Mean MCC = 0.1267 
MCC = [ 0.    ,-0.0286,-0.0286, 0.3788,-0.0466, 0.5192, 0.0927]
>> Mean AP = 0.5390 
AP = [1.    ,0.3333,0.3333,0.75  ,0.1667,0.9498,0.2396]
>> Mean F1 = 0.2091 
F1 = [0.    ,0.    ,0.    ,0.4   ,0.    ,0.8533,0.2105]
19 19
19 19
>> All trials: mAUC = [0.8912,0.8912,0.8912,0.8912,0.8912]
 mMCC = [0.1267,0.1267,0.1267,0.1267,0.1267]
 mAP = [0.539,0.539,0.539,0.539,0.539]
 mF1 = [0.2091,0.2091,0.2091,0.2091,0.2091]
 
>> Mean / STD over All trials: aAUC = 0.8912(0.0000) aMCC = 0.1267(0.0000) aAP = 0.5390(0.0000) aF1 = 0.2091(0.0000)  


